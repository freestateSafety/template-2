<?php

namespace App\Repository;

use App\Entity\ProductCategory;
use Doctrine\Common\Collections\Criteria;
use Doctrine\ORM\EntityRepository;

/**
 * ProductCategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductCategoryRepository extends EntityRepository
{
    public function getMaxPriority(ProductCategory $category = null)
    {
        $criteria = Criteria::create();
        $expr = Criteria::expr();

        if (empty($category)) {
            $expr = $expr->isNull('parent');
        } else {
            $expr = $expr->eq('parent', $category);
        }

        $criteria->where($expr)->orderBy(['priority' => Criteria::DESC]);
        return (($category = $this->matching($criteria)->first()) && is_object($category))? $category->getPriority() : 1;
    }

    public function refreshPriority(ProductCategory $parent = null)
    {
        $criteria = Criteria::create();
        $expr = Criteria::expr();

        if (empty($parent)) {
            $expr = $expr->isNull('parent');
        } else {
            $expr = $expr->eq('parent', $parent);
        }

        $criteria->where($expr)->orderBy(['priority' => Criteria::ASC]);
        $categories = $this->matching($criteria);

        /**
         * @var int $key
         * @var ProductCategory $category
         */
        foreach ($categories as $key => $category) {
            $category->setPriority($key+1);
            $this->getEntityManager()->merge($category);
        }

        $this->getEntityManager()->flush();
    }

    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null): array
    {
        if (empty($orderBy)) $orderBy = ['priority' => 'ASC'];

        return parent::findBy($criteria, $orderBy, $limit, $offset);
    }

    public function findByParentAndCategory($parentId, $categoryId)
    {
        $qb = $this->createQueryBuilder('c');
        return $qb
            ->where($qb->expr()->eq('c.parent', $parentId))
            ->andWhere($qb->expr()->eq('c.id', $categoryId))
            ->getQuery()
            ->getOneOrNullResult();
    }
}
